/* This file is autogenerated by tracetool, do not edit. */

probe qemu.kvm.qemu_malloc = process("/usr/libexec/qemu-kvm").mark("qemu_malloc")
{
  size = $arg1;
  ptr = $arg2;
}

probe qemu.kvm.qemu_realloc = process("/usr/libexec/qemu-kvm").mark("qemu_realloc")
{
  ptr = $arg1;
  size = $arg2;
  newptr = $arg3;
}

probe qemu.kvm.qemu_free = process("/usr/libexec/qemu-kvm").mark("qemu_free")
{
  ptr = $arg1;
}

probe qemu.kvm.qemu_memalign = process("/usr/libexec/qemu-kvm").mark("qemu_memalign")
{
  alignment = $arg1;
  size = $arg2;
  ptr = $arg3;
}

probe qemu.kvm.qemu_vmalloc = process("/usr/libexec/qemu-kvm").mark("qemu_vmalloc")
{
  size = $arg1;
  ptr = $arg2;
}

probe qemu.kvm.qemu_vfree = process("/usr/libexec/qemu-kvm").mark("qemu_vfree")
{
  ptr = $arg1;
}

probe qemu.kvm.virtqueue_fill = process("/usr/libexec/qemu-kvm").mark("virtqueue_fill")
{
  vq = $arg1;
  elem = $arg2;
  len = $arg3;
  idx = $arg4;
}

probe qemu.kvm.virtqueue_flush = process("/usr/libexec/qemu-kvm").mark("virtqueue_flush")
{
  vq = $arg1;
  count = $arg2;
}

probe qemu.kvm.virtqueue_pop = process("/usr/libexec/qemu-kvm").mark("virtqueue_pop")
{
  vq = $arg1;
  elem = $arg2;
  in_num = $arg3;
  out_num = $arg4;
}

probe qemu.kvm.virtio_queue_notify = process("/usr/libexec/qemu-kvm").mark("virtio_queue_notify")
{
  vdev = $arg1;
  n = $arg2;
  vq = $arg3;
}

probe qemu.kvm.virtio_irq = process("/usr/libexec/qemu-kvm").mark("virtio_irq")
{
  vq = $arg1;
}

probe qemu.kvm.virtio_notify = process("/usr/libexec/qemu-kvm").mark("virtio_notify")
{
  vdev = $arg1;
  vq = $arg2;
}

probe qemu.kvm.multiwrite_cb = process("/usr/libexec/qemu-kvm").mark("multiwrite_cb")
{
  mcb = $arg1;
  ret = $arg2;
}

probe qemu.kvm.bdrv_aio_multiwrite = process("/usr/libexec/qemu-kvm").mark("bdrv_aio_multiwrite")
{
  mcb = $arg1;
  num_callbacks = $arg2;
  num_reqs = $arg3;
}

probe qemu.kvm.bdrv_aio_multiwrite_earlyfail = process("/usr/libexec/qemu-kvm").mark("bdrv_aio_multiwrite_earlyfail")
{
  mcb = $arg1;
}

probe qemu.kvm.bdrv_aio_multiwrite_latefail = process("/usr/libexec/qemu-kvm").mark("bdrv_aio_multiwrite_latefail")
{
  mcb = $arg1;
  i = $arg2;
}

probe qemu.kvm.bdrv_aio_readv = process("/usr/libexec/qemu-kvm").mark("bdrv_aio_readv")
{
  bs = $arg1;
  sector_num = $arg2;
  nb_sectors = $arg3;
  opaque = $arg4;
}

probe qemu.kvm.bdrv_aio_writev = process("/usr/libexec/qemu-kvm").mark("bdrv_aio_writev")
{
  bs = $arg1;
  sector_num = $arg2;
  nb_sectors = $arg3;
  opaque = $arg4;
}

probe qemu.kvm.bdrv_lock_medium = process("/usr/libexec/qemu-kvm").mark("bdrv_lock_medium")
{
  bs = $arg1;
  locked = $arg2;
}

probe qemu.kvm.virtio_blk_req_complete = process("/usr/libexec/qemu-kvm").mark("virtio_blk_req_complete")
{
  req = $arg1;
  status = $arg2;
}

probe qemu.kvm.virtio_blk_rw_complete = process("/usr/libexec/qemu-kvm").mark("virtio_blk_rw_complete")
{
  req = $arg1;
  ret = $arg2;
}

probe qemu.kvm.virtio_blk_handle_write = process("/usr/libexec/qemu-kvm").mark("virtio_blk_handle_write")
{
  req = $arg1;
  sector = $arg2;
  nsectors = $arg3;
}

probe qemu.kvm.paio_submit = process("/usr/libexec/qemu-kvm").mark("paio_submit")
{
  acb = $arg1;
  opaque = $arg2;
  sector_num = $arg3;
  nb_sectors = $arg4;
  type = $arg5;
}

probe qemu.kvm.cpu_in = process("/usr/libexec/qemu-kvm").mark("cpu_in")
{
  addr = $arg1;
  val = $arg2;
}

probe qemu.kvm.cpu_out = process("/usr/libexec/qemu-kvm").mark("cpu_out")
{
  addr = $arg1;
  val = $arg2;
}

probe qemu.kvm.balloon_event = process("/usr/libexec/qemu-kvm").mark("balloon_event")
{
  opaque = $arg1;
  addr = $arg2;
}

probe qemu.kvm.apic_local_deliver = process("/usr/libexec/qemu-kvm").mark("apic_local_deliver")
{
  vector = $arg1;
  lvt = $arg2;
}

probe qemu.kvm.apic_deliver_irq = process("/usr/libexec/qemu-kvm").mark("apic_deliver_irq")
{
  dest = $arg1;
  dest_mode = $arg2;
  delivery_mode = $arg3;
  vector_num = $arg4;
  polarity = $arg5;
  trigger_mode = $arg6;
}

probe qemu.kvm.cpu_set_apic_base = process("/usr/libexec/qemu-kvm").mark("cpu_set_apic_base")
{
  val = $arg1;
}

probe qemu.kvm.cpu_get_apic_base = process("/usr/libexec/qemu-kvm").mark("cpu_get_apic_base")
{
  val = $arg1;
}

probe qemu.kvm.apic_mem_readl = process("/usr/libexec/qemu-kvm").mark("apic_mem_readl")
{
  addr = $arg1;
  val = $arg2;
}

probe qemu.kvm.apic_mem_writel = process("/usr/libexec/qemu-kvm").mark("apic_mem_writel")
{
  addr = $arg1;
  val = $arg2;
}

probe qemu.kvm.apic_reset_irq_delivered = process("/usr/libexec/qemu-kvm").mark("apic_reset_irq_delivered")
{
  apic_irq_delivered = $arg1;
}

probe qemu.kvm.apic_get_irq_delivered = process("/usr/libexec/qemu-kvm").mark("apic_get_irq_delivered")
{
  apic_irq_delivered = $arg1;
}

probe qemu.kvm.apic_set_irq = process("/usr/libexec/qemu-kvm").mark("apic_set_irq")
{
  apic_irq_delivered = $arg1;
}

probe qemu.kvm.usb_port_claim = process("/usr/libexec/qemu-kvm").mark("usb_port_claim")
{
  bus = $arg1;
  port = $arg2;
}

probe qemu.kvm.usb_port_attach = process("/usr/libexec/qemu-kvm").mark("usb_port_attach")
{
  bus = $arg1;
  port = $arg2;
}

probe qemu.kvm.usb_port_detach = process("/usr/libexec/qemu-kvm").mark("usb_port_detach")
{
  bus = $arg1;
  port = $arg2;
}

probe qemu.kvm.usb_port_release = process("/usr/libexec/qemu-kvm").mark("usb_port_release")
{
  bus = $arg1;
  port = $arg2;
}

probe qemu.kvm.usb_ehci_reset = process("/usr/libexec/qemu-kvm").mark("usb_ehci_reset")
{
}

probe qemu.kvm.usb_ehci_mmio_readl = process("/usr/libexec/qemu-kvm").mark("usb_ehci_mmio_readl")
{
  addr = $arg1;
  str = $arg2;
  val = $arg3;
}

probe qemu.kvm.usb_ehci_mmio_writel = process("/usr/libexec/qemu-kvm").mark("usb_ehci_mmio_writel")
{
  addr = $arg1;
  str = $arg2;
  val = $arg3;
}

probe qemu.kvm.usb_ehci_mmio_change = process("/usr/libexec/qemu-kvm").mark("usb_ehci_mmio_change")
{
  addr = $arg1;
  str = $arg2;
  new = $arg3;
  old = $arg4;
}

probe qemu.kvm.usb_ehci_usbsts = process("/usr/libexec/qemu-kvm").mark("usb_ehci_usbsts")
{
  sts = $arg1;
  state = $arg2;
}

probe qemu.kvm.usb_ehci_state = process("/usr/libexec/qemu-kvm").mark("usb_ehci_state")
{
  schedule = $arg1;
  state = $arg2;
}

probe qemu.kvm.usb_ehci_qh_ptrs = process("/usr/libexec/qemu-kvm").mark("usb_ehci_qh_ptrs")
{
  q = $arg1;
  addr = $arg2;
  nxt = $arg3;
  c_qtd = $arg4;
  n_qtd = $arg5;
  a_qtd = $arg6;
}

probe qemu.kvm.usb_ehci_qh_fields = process("/usr/libexec/qemu-kvm").mark("usb_ehci_qh_fields")
{
  addr = $arg1;
  rl = $arg2;
  mplen = $arg3;
  eps = $arg4;
  ep = $arg5;
  devaddr = $arg6;
}

probe qemu.kvm.usb_ehci_qh_bits = process("/usr/libexec/qemu-kvm").mark("usb_ehci_qh_bits")
{
  addr = $arg1;
  c = $arg2;
  h = $arg3;
  dtc = $arg4;
  i = $arg5;
}

probe qemu.kvm.usb_ehci_qtd_ptrs = process("/usr/libexec/qemu-kvm").mark("usb_ehci_qtd_ptrs")
{
  q = $arg1;
  addr = $arg2;
  nxt = $arg3;
  altnext = $arg4;
}

probe qemu.kvm.usb_ehci_qtd_fields = process("/usr/libexec/qemu-kvm").mark("usb_ehci_qtd_fields")
{
  addr = $arg1;
  tbytes = $arg2;
  cpage = $arg3;
  cerr = $arg4;
  pid = $arg5;
}

probe qemu.kvm.usb_ehci_qtd_bits = process("/usr/libexec/qemu-kvm").mark("usb_ehci_qtd_bits")
{
  addr = $arg1;
  ioc = $arg2;
  active = $arg3;
  halt = $arg4;
  babble = $arg5;
  xacterr = $arg6;
}

probe qemu.kvm.usb_ehci_itd = process("/usr/libexec/qemu-kvm").mark("usb_ehci_itd")
{
  addr = $arg1;
  nxt = $arg2;
  mplen = $arg3;
  mult = $arg4;
  ep = $arg5;
  devaddr = $arg6;
}

probe qemu.kvm.usb_ehci_port_attach = process("/usr/libexec/qemu-kvm").mark("usb_ehci_port_attach")
{
  port = $arg1;
  device = $arg2;
}

probe qemu.kvm.usb_ehci_port_detach = process("/usr/libexec/qemu-kvm").mark("usb_ehci_port_detach")
{
  port = $arg1;
}

probe qemu.kvm.usb_ehci_port_reset = process("/usr/libexec/qemu-kvm").mark("usb_ehci_port_reset")
{
  port = $arg1;
  enable = $arg2;
}

probe qemu.kvm.usb_ehci_data = process("/usr/libexec/qemu-kvm").mark("usb_ehci_data")
{
  rw = $arg1;
  cpage = $arg2;
  offset = $arg3;
  addr = $arg4;
  len = $arg5;
  bufpos = $arg6;
}

probe qemu.kvm.usb_ehci_queue_action = process("/usr/libexec/qemu-kvm").mark("usb_ehci_queue_action")
{
  q = $arg1;
  action = $arg2;
}

probe qemu.kvm.usb_desc_device = process("/usr/libexec/qemu-kvm").mark("usb_desc_device")
{
  addr = $arg1;
  len = $arg2;
  ret = $arg3;
}

probe qemu.kvm.usb_desc_device_qualifier = process("/usr/libexec/qemu-kvm").mark("usb_desc_device_qualifier")
{
  addr = $arg1;
  len = $arg2;
  ret = $arg3;
}

probe qemu.kvm.usb_desc_config = process("/usr/libexec/qemu-kvm").mark("usb_desc_config")
{
  addr = $arg1;
  index = $arg2;
  len = $arg3;
  ret = $arg4;
}

probe qemu.kvm.usb_desc_other_speed_config = process("/usr/libexec/qemu-kvm").mark("usb_desc_other_speed_config")
{
  addr = $arg1;
  index = $arg2;
  len = $arg3;
  ret = $arg4;
}

probe qemu.kvm.usb_desc_string = process("/usr/libexec/qemu-kvm").mark("usb_desc_string")
{
  addr = $arg1;
  index = $arg2;
  len = $arg3;
  ret = $arg4;
}

probe qemu.kvm.usb_set_addr = process("/usr/libexec/qemu-kvm").mark("usb_set_addr")
{
  addr = $arg1;
}

probe qemu.kvm.usb_set_config = process("/usr/libexec/qemu-kvm").mark("usb_set_config")
{
  addr = $arg1;
  config = $arg2;
  ret = $arg3;
}

probe qemu.kvm.usb_clear_device_feature = process("/usr/libexec/qemu-kvm").mark("usb_clear_device_feature")
{
  addr = $arg1;
  feature = $arg2;
  ret = $arg3;
}

probe qemu.kvm.usb_set_device_feature = process("/usr/libexec/qemu-kvm").mark("usb_set_device_feature")
{
  addr = $arg1;
  feature = $arg2;
  ret = $arg3;
}

probe qemu.kvm.scsi_req_alloc = process("/usr/libexec/qemu-kvm").mark("scsi_req_alloc")
{
  target = $arg1;
  lun = $arg2;
  tag = $arg3;
}

probe qemu.kvm.scsi_req_data = process("/usr/libexec/qemu-kvm").mark("scsi_req_data")
{
  target = $arg1;
  lun = $arg2;
  tag = $arg3;
  len = $arg4;
}

probe qemu.kvm.scsi_req_dequeue = process("/usr/libexec/qemu-kvm").mark("scsi_req_dequeue")
{
  target = $arg1;
  lun = $arg2;
  tag = $arg3;
}

probe qemu.kvm.scsi_req_continue = process("/usr/libexec/qemu-kvm").mark("scsi_req_continue")
{
  target = $arg1;
  lun = $arg2;
  tag = $arg3;
}

probe qemu.kvm.scsi_req_parsed = process("/usr/libexec/qemu-kvm").mark("scsi_req_parsed")
{
  target = $arg1;
  lun = $arg2;
  tag = $arg3;
  cmd = $arg4;
  mode = $arg5;
  xfer = $arg6;
}

probe qemu.kvm.scsi_req_parsed_lba = process("/usr/libexec/qemu-kvm").mark("scsi_req_parsed_lba")
{
  target = $arg1;
  lun = $arg2;
  tag = $arg3;
  cmd = $arg4;
  lba = $arg5;
}

probe qemu.kvm.scsi_req_parse_bad = process("/usr/libexec/qemu-kvm").mark("scsi_req_parse_bad")
{
  target = $arg1;
  lun = $arg2;
  tag = $arg3;
  cmd = $arg4;
}

probe qemu.kvm.scsi_req_build_sense = process("/usr/libexec/qemu-kvm").mark("scsi_req_build_sense")
{
  target = $arg1;
  lun = $arg2;
  tag = $arg3;
  key = $arg4;
  asc = $arg5;
  ascq = $arg6;
}

probe qemu.kvm.vm_state_notify = process("/usr/libexec/qemu-kvm").mark("vm_state_notify")
{
  running = $arg1;
  reason = $arg2;
}

probe qemu.kvm.qed_alloc_l2_cache_entry = process("/usr/libexec/qemu-kvm").mark("qed_alloc_l2_cache_entry")
{
  l2_cache = $arg1;
  entry = $arg2;
}

probe qemu.kvm.qed_unref_l2_cache_entry = process("/usr/libexec/qemu-kvm").mark("qed_unref_l2_cache_entry")
{
  entry = $arg1;
  ref = $arg2;
}

probe qemu.kvm.qed_find_l2_cache_entry = process("/usr/libexec/qemu-kvm").mark("qed_find_l2_cache_entry")
{
  l2_cache = $arg1;
  entry = $arg2;
  offset = $arg3;
  ref = $arg4;
}

probe qemu.kvm.qed_read_table = process("/usr/libexec/qemu-kvm").mark("qed_read_table")
{
  s = $arg1;
  offset = $arg2;
  table = $arg3;
}

probe qemu.kvm.qed_read_table_cb = process("/usr/libexec/qemu-kvm").mark("qed_read_table_cb")
{
  s = $arg1;
  table = $arg2;
  ret = $arg3;
}

probe qemu.kvm.qed_write_table = process("/usr/libexec/qemu-kvm").mark("qed_write_table")
{
  s = $arg1;
  offset = $arg2;
  table = $arg3;
  index = $arg4;
  n = $arg5;
}

probe qemu.kvm.qed_write_table_cb = process("/usr/libexec/qemu-kvm").mark("qed_write_table_cb")
{
  s = $arg1;
  table = $arg2;
  flush = $arg3;
  ret = $arg4;
}

probe qemu.kvm.qed_need_check_timer_cb = process("/usr/libexec/qemu-kvm").mark("qed_need_check_timer_cb")
{
  s = $arg1;
}

probe qemu.kvm.qed_start_need_check_timer = process("/usr/libexec/qemu-kvm").mark("qed_start_need_check_timer")
{
  s = $arg1;
}

probe qemu.kvm.qed_cancel_need_check_timer = process("/usr/libexec/qemu-kvm").mark("qed_cancel_need_check_timer")
{
  s = $arg1;
}

probe qemu.kvm.qed_aio_complete = process("/usr/libexec/qemu-kvm").mark("qed_aio_complete")
{
  s = $arg1;
  acb = $arg2;
  ret = $arg3;
}

probe qemu.kvm.qed_aio_setup = process("/usr/libexec/qemu-kvm").mark("qed_aio_setup")
{
  s = $arg1;
  acb = $arg2;
  sector_num = $arg3;
  nb_sectors = $arg4;
  opaque = $arg5;
  flags = $arg6;
}

probe qemu.kvm.qed_aio_next_io = process("/usr/libexec/qemu-kvm").mark("qed_aio_next_io")
{
  s = $arg1;
  acb = $arg2;
  ret = $arg3;
  cur_pos = $arg4;
}

probe qemu.kvm.qed_aio_read_data = process("/usr/libexec/qemu-kvm").mark("qed_aio_read_data")
{
  s = $arg1;
  acb = $arg2;
  ret = $arg3;
  offset = $arg4;
  len = $arg5;
}

probe qemu.kvm.qed_copy_on_read_cb = process("/usr/libexec/qemu-kvm").mark("qed_copy_on_read_cb")
{
  acb = $arg1;
  ret = $arg2;
}

probe qemu.kvm.qed_aio_write_data = process("/usr/libexec/qemu-kvm").mark("qed_aio_write_data")
{
  s = $arg1;
  acb = $arg2;
  ret = $arg3;
  offset = $arg4;
  len = $arg5;
}

probe qemu.kvm.qed_aio_write_prefill = process("/usr/libexec/qemu-kvm").mark("qed_aio_write_prefill")
{
  s = $arg1;
  acb = $arg2;
  start = $arg3;
  len = $arg4;
  offset = $arg5;
}

probe qemu.kvm.qed_aio_write_postfill = process("/usr/libexec/qemu-kvm").mark("qed_aio_write_postfill")
{
  s = $arg1;
  acb = $arg2;
  start = $arg3;
  len = $arg4;
  offset = $arg5;
}

probe qemu.kvm.qed_aio_write_main = process("/usr/libexec/qemu-kvm").mark("qed_aio_write_main")
{
  s = $arg1;
  acb = $arg2;
  ret = $arg3;
  offset = $arg4;
  len = $arg5;
}

